<div class="content"><h1>Description</h1><!--introduction--><p>This tutorial fits a spinwave model to simulated powder data.</p><!--/introduction--><h2>Contents</h2><div><ul><li><a href="#1">Define instrument resolution parameters for MARI</a></li><li><a href="#2">Generate data</a></li><li><a href="#3">Initialise the sw_fitpowder class and plot data to inspect initial guess</a></li><li><a href="#4">Fit and inspect the result</a></li><li><a href="#5">Fit 1D cuts</a></li></ul></div><h2 id="1">Define instrument resolution parameters for MARI</h2><p>This is a simplified parameterisation of the resolution of a Time-of-Flight spectrometer which will be used to broaden the simulated data. These parameters will depend on the instrument used - the instrument contact should be able to provide these.</p><pre class="codeinput">Ei = 20; <span class="comment">% meV</span>

<span class="comment">% Resolution for MARI with Gd chopper running at 200Hz and Ei=20meV (from PyChop)</span>
eres = @(en) 2.1750e-04*sqrt((Ei-en).^3 .* ( (32.27217*(0.168+0.400*(Ei./(Ei-en)).^1.5)).^2 + (14.53577*(1.168+0.400*(Ei./(Ei-en)).^1.5)).^2) );
<span class="comment">% Q-resolution (parameters for MARI)</span>
e2k = @(en) sqrt( en .* (2*1.67492728e-27*1.60217653e-22) )./1.05457168e-34./1e10;
L1 = 11.8;  <span class="comment">% Moderator to Sample distance in m</span>
L2 = 4.0;   <span class="comment">% Sample to detector distance in m</span>
ws = 0.05;  <span class="comment">% Width of sample in m</span>
wm = 0.12;  <span class="comment">% Width of moderator in m</span>
wd = 0.025; <span class="comment">% Width of detector in m</span>
ki = e2k(Ei);
a1 = ws/L1; <span class="comment">% Angular width of sample seen from moderator</span>
a2 = wm/L1; <span class="comment">% Angular width of moderator seen from sample</span>
a3 = wd/L2; <span class="comment">% Angular width of detector seen from sample</span>
a4 = ws/L2; <span class="comment">% Angular width of sample seen from detector</span>
dQ = 2.35 * sqrt( (ki*a1)^2/12 + (ki*a2)^2/12 + (ki*a3)^2/12 + (ki*a4)^2/12 );
</pre><h2 id="2">Generate data</h2><p>Simulate a powder spectrum of a triangular AFM with constant background and normally distributed noise. This can also be done using the powder fitting class if an empty data array is passed.</p><pre class="codeinput"><span class="comment">% intialise spinw model</span>
tri = sw_model(<span class="string">'triAF'</span>,1);
scale = 1000;

<span class="comment">% calculate powder spectrum</span>
E = linspace(0,4,80);
Q = linspace(0.1,3,60);
spec = tri.powspec(Q,<span class="string">'Evect'</span>,E,<span class="string">'nRand'</span>,2e2);
<span class="comment">% scale data and add background</span>
spec.swConv= scale*(spec.swConv + 0.1*mean(spec.swConv, <span class="string">'all'</span>));
<span class="comment">% crop to kinematic range of instrument and apply some arbitrary resolution</span>
spec = sw_instrument(spec, <span class="string">'dQ'</span>, dQ, <span class="string">'dE'</span>, eres, <span class="string">'ThetaMin'</span>, 3.5, <span class="string">'Ei'</span>, Ei);
<span class="comment">% add noise</span>
e = sqrt(spec.swConv);
spec.swConv = spec.swConv + e.*randn(size(spec.swConv));

<span class="comment">% make xye struct containing data</span>
data = struct(<span class="string">'x'</span>, {{0.5*(E(1:end-1) + E(2:end)), Q}}, <span class="keyword">...</span>
              <span class="string">'y'</span>, spec.swConv', <span class="keyword">...</span>
              <span class="string">'e'</span>, e');
</pre><h2 id="3">Initialise the sw_fitpowder class and plot data to inspect initial guess</h2><p>To initialise the powder fitting class (sw_fitpowder) object requires a spinw model with a magnetic strucutre and couplings added. Additional arguments are the data (can be xye structs for 2D data a cell array of xye structs for 1D data, or HORACE objects - see sw_fitpowder help for more details), a fit function which alters the matrices on the spinw object and a vector of initial guesses for the fit parameters.</p><p>Optinally a background strategy can be specified as a 5th positional argument ("planar" background in energy transfer and <tt>Q</tt> or "independent" background for each 1D cut (1D only)).</p><p>The class will call other spinw algorithms such as powspec and sw_instrument. The parameters used in these calls can be set by the user by modifying structs as shown below.</p><p>Data can be cropped in <tt>Q</tt> and energy transfer - for example it is advisible not to include the low-energy transfer region close to the elastic line (relative to the resolution).</p><pre class="codeinput">fit_func =  @(obj, p) matparser(obj, <span class="string">'param'</span>, p, <span class="string">'mat'</span>, {<span class="string">'J_1'</span>}, <span class="string">'init'</span>, true);
J1 = 0.85;

fitpow = sw_fitpowder(tri, data,  fit_func, [J1]);
fitpow.set_caching(true); <span class="comment">% will store last calculated spectra</span>

<span class="comment">% set parameters passed to powspec</span>
fitpow.powspec_args.dE = eres; <span class="comment">% emergy resolution</span>
fitpow.powspec_args.fastmode = true;
fitpow.powspec_args.neutron_output = true;
fitpow.powspec_args.nRand = 2e2; <span class="comment">% low for speed (typically want &gt; 1e3)</span>
fitpow.powspec_args.hermit = true;
<span class="comment">% set parameters passsed to sw_instrument</span>
fitpow.sw_instrument_args = struct(<span class="string">'dQ'</span>, dQ, <span class="string">'ThetaMin'</span>, 3.5, <span class="string">'Ei'</span>, Ei);

<span class="comment">% crop data</span>
fitpow.crop_energy_range(1.5*eres(0), inf); <span class="comment">% typically want to avoid elastic line</span>
fitpow.crop_q_range(0.25, 3);
fitpow.powspec_args.dE = eres;
fitpow.powspec_args.fastmode = true;
fitpow.powspec_args.neutron_output = true;

<span class="comment">% estimate background and scale factor</span>
fitpow.estimate_constant_background();
fitpow.estimate_scale_factor();


<span class="comment">% plot data to inspect - any arguments after parameters are passed to</span>
<span class="comment">% contour plot (which shows the result the calculated intensity)</span>
fitpow.plot_result(fitpow.params, <span class="string">'EdgeAlpha'</span>, 0.9, <span class="string">'LineWidth'</span>, 1 ,<span class="string">'EdgeColor'</span>, <span class="string">'k'</span>);
</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial39_01.png" alt=""> <h2 id="4">Fit and inspect the result</h2><p>It can be desirable to set bounds on fit parameters and fix some parameters initially to get a reasonable fit with as few degrees of freedom as possible. For example one might assume the background is constant in an initial fit.</p><p>The cost function minimised in the fit can be chi-squared ("chisq") or the unweighted sum of the squared residuals ("Rsq"). Also the minimiser can be set to any callable as long as it shares the API of the ndbase minimisers. Typically users would be recommended ndbase.lm or ndbase.simplex.</p><pre class="codeinput"><span class="comment">% set cost function and minimser</span>
fitpow.cost_function = <span class="string">"Rsq"</span>;  <span class="comment">% "Rsq" or "chisq"</span>
fitpow.optimizer = @ndbase.simplex; <span class="comment">% or e.g. ndbase.simplex</span>

<span class="comment">% Fix background parameters (planar background of form</span>
<span class="comment">% default background is planar with parameters:</span>
<span class="comment">% [slope_energy, slope_modQ,  intercept]</span>
fitpow.fix_bg_parameters(1:2); <span class="comment">% fix slopes to initial value (0)</span>
fitpow.set_bg_parameter_bounds(3, 0.0, []) <span class="comment">% Set lb of constant bg = 0</span>
<span class="comment">% fit background</span>
fitpow.fit_background();
fitpow.fix_bg_parameters(3); <span class="comment">% fix fitted constant bg</span>

<span class="comment">% set bounds on first (and only in this case) model parameter</span>
fitpow.set_model_parameter_bounds(1, 0, []) <span class="comment">% Force J_1 to be AFM</span>

[pfit, cost_val, stat] = fitpow.fit();

<span class="comment">% plot 2D colorfill</span>
fitpow.plot_result(pfit, 10,  <span class="string">'EdgeAlpha'</span>, 0.9, <span class="string">'LineWidth'</span>, 1 ,<span class="string">'EdgeColor'</span>, <span class="string">'k'</span>)

<span class="comment">% make 1D plots</span>
qcens = [0.8:0.4:1.6];
dq = 0.05;
fitpow.plot_1d_cuts_of_2d_data(qcens-dq, qcens+dq, pfit)
</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial39_02.png" alt=""> <img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial39_03.png" alt=""> <h2 id="5">Fit 1D cuts</h2><p>As discussed the sw_fitpowder class can be initialised with a cell array of xye structs correpsonding to 1D cuts at constant <tt>Q</tt>. Alternatively, having loaded in 2D data the sw_fitpowder class has a convenient method to take 1D cuts and replace the data.</p><p>To evaluate the cost function for 1D cuts, the class averages the model over nQ points. Depending on the size of the 2D data and the value of nQ it can be much quicker to fit 1D cuts.</p><p>The background for 1D cuts can be handled in two ways:</p><pre>- A planar background as in the 2D case</pre><pre>- A linear background in energy transfer that's independent for each cut.</pre><p>The background parameters and bounds are reset if the background strategy is changed to independent.</p><pre class="codeinput"><span class="comment">% set nQ before replacing data (reduced from default, 10, for speed)</span>
fitpow.nQ = 5;
<span class="comment">% change background strategyto independent (planar is default)</span>
fitpow.replace_2D_data_with_1D_cuts(qcens-dq, qcens+dq, <span class="string">"independent"</span>);

<span class="comment">% independent linear background for all cuts with parameters:</span>
<span class="comment">% [slope_energy,  intercept]</span>
fitpow.fix_bg_parameters(1); <span class="comment">% fix slopes to initial value (0) for all cuts</span>
<span class="comment">% e.g. fitpow.fix_bg_parameters(1, 2) would fix the bg slope of the second cut</span>
fitpow.set_bg_parameter_bounds(2, 0.0, []) <span class="comment">% Set lb of constant bg = 0</span>
<span class="comment">% fit background</span>
fitpow.estimate_constant_background();
fitpow.fit_background();
fitpow.fix_bg_parameters(2); <span class="comment">% fix fitted constant bg</span>

[pfit, cost_val, stat]  = fitpow.fit();

fitpow.plot_result(pfit)
</pre><pre class="codeoutput">Warning: Clearing 2D data previously added. 
Warning: Overwriting background parmaweters with 0. 
Warning: Background strategy changed - background parameters and bounds
will be cleared. 
</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial39_04.png" alt=""> <p class="footer"><br><a href="https://www.mathworks.com/products/matlab/">Published with MATLAB&reg; R2022b</a><br></p></div><!--
<literal>##### SOURCE BEGIN #####
%% Description
% This tutorial fits a spinwave model to simulated powder data.

%% Define instrument resolution parameters for MARI
% This is a simplified parameterisation of the resolution of a
% Time-of-Flight spectrometer which will be used to broaden the simulated
% data. These parameters will depend on the instrument used - the instrument
% contact should be able to provide these.

Ei = 20; % meV

% Resolution for MARI with Gd chopper running at 200Hz and Ei=20meV (from PyChop)
eres = @(en) 2.1750e-04*sqrt((Ei-en).^3 .* ( (32.27217*(0.168+0.400*(Ei./(Ei-en)).^1.5)).^2 + (14.53577*(1.168+0.400*(Ei./(Ei-en)).^1.5)).^2) );
% Q-resolution (parameters for MARI)
e2k = @(en) sqrt( en .* (2*1.67492728e-27*1.60217653e-22) )./1.05457168e-34./1e10;
L1 = 11.8;  % Moderator to Sample distance in m
L2 = 4.0;   % Sample to detector distance in m
ws = 0.05;  % Width of sample in m
wm = 0.12;  % Width of moderator in m
wd = 0.025; % Width of detector in m
ki = e2k(Ei);
a1 = ws/L1; % Angular width of sample seen from moderator
a2 = wm/L1; % Angular width of moderator seen from sample
a3 = wd/L2; % Angular width of detector seen from sample
a4 = ws/L2; % Angular width of sample seen from detector
dQ = 2.35 * sqrt( (ki*a1)^2/12 + (ki*a2)^2/12 + (ki*a3)^2/12 + (ki*a4)^2/12 );

%% Generate data
% Simulate a powder spectrum of a triangular AFM with constant background
% and normally distributed noise. This can also be done using the powder
% fitting class if an empty data array is passed.


% intialise spinw model
tri = sw_model('triAF',1);
scale = 1000;

% calculate powder spectrum
E = linspace(0,4,80);
Q = linspace(0.1,3,60);
spec = tri.powspec(Q,'Evect',E,'nRand',2e2);
% scale data and add background
spec.swConv= scale*(spec.swConv + 0.1*mean(spec.swConv, 'all'));
% crop to kinematic range of instrument and apply some arbitrary resolution
spec = sw_instrument(spec, 'dQ', dQ, 'dE', eres, 'ThetaMin', 3.5, 'Ei', Ei);
% add noise
e = sqrt(spec.swConv);
spec.swConv = spec.swConv + e.*randn(size(spec.swConv));

% make xye struct containing data
data = struct('x', {{0.5*(E(1:end-1) + E(2:end)), Q}}, ...
              'y', spec.swConv', ...
              'e', e');

%% Initialise the sw_fitpowder class and plot data to inspect initial guess
% To initialise the powder fitting class (sw_fitpowder) object requires a 
% spinw model with a magnetic strucutre and couplings added. 
% Additional arguments are the data (can be xye structs for 2D data a cell
% array of xye structs for 1D data, or HORACE objects - see sw_fitpowder
% help for more details), a fit function which alters the matrices on the 
% spinw object and a vector of initial guesses for the fit parameters.
%
% Optinally a background strategy can be specified as a 5th positional 
% argument ("planar" background in energy transfer and |Q| or "independent"
% background for each 1D cut (1D only)).
%
% The class will call other spinw algorithms such as powspec and
% sw_instrument. The parameters used in these calls can be set by the user
% by modifying structs as shown below.
%
% Data can be cropped in |Q| and energy transfer - for example it is
% advisible not to include the low-energy transfer region close to the
% elastic line (relative to the resolution). 


fit_func =  @(obj, p) matparser(obj, 'param', p, 'mat', {'J_1'}, 'init', true);
J1 = 0.85;

fitpow = sw_fitpowder(tri, data,  fit_func, [J1]);
fitpow.set_caching(true); % will store last calculated spectra

% set parameters passed to powspec
fitpow.powspec_args.dE = eres; % emergy resolution
fitpow.powspec_args.fastmode = true;
fitpow.powspec_args.neutron_output = true;
fitpow.powspec_args.nRand = 2e2; % low for speed (typically want > 1e3)
fitpow.powspec_args.hermit = true;
% set parameters passsed to sw_instrument
fitpow.sw_instrument_args = struct('dQ', dQ, 'ThetaMin', 3.5, 'Ei', Ei);

% crop data
fitpow.crop_energy_range(1.5*eres(0), inf); % typically want to avoid elastic line
fitpow.crop_q_range(0.25, 3);
fitpow.powspec_args.dE = eres;
fitpow.powspec_args.fastmode = true;
fitpow.powspec_args.neutron_output = true;

% estimate background and scale factor
fitpow.estimate_constant_background();
fitpow.estimate_scale_factor();


% plot data to inspect - any arguments after parameters are passed to 
% contour plot (which shows the result the calculated intensity)
fitpow.plot_result(fitpow.params, 'EdgeAlpha', 0.9, 'LineWidth', 1 ,'EdgeColor', 'k');


%% Fit and inspect the result
% It can be desirable to set bounds on fit parameters and fix some
% parameters initially to get a reasonable fit with as few degrees of
% freedom as possible. For example one might assume the background is 
% constant in an initial fit.
%
% The cost function minimised in the fit can be chi-squared ("chisq") or 
% the unweighted sum of the squared residuals ("Rsq"). Also the minimiser
% can be set to any callable as long as it shares the API of the ndbase
% minimisers. Typically users would be recommended ndbase.lm or
% ndbase.simplex.

% set cost function and minimser
fitpow.cost_function = "Rsq";  % "Rsq" or "chisq"
fitpow.optimizer = @ndbase.simplex; % or e.g. ndbase.simplex

% Fix background parameters (planar background of form 
% default background is planar with parameters:
% [slope_energy, slope_modQ,  intercept]
fitpow.fix_bg_parameters(1:2); % fix slopes to initial value (0)
fitpow.set_bg_parameter_bounds(3, 0.0, []) % Set lb of constant bg = 0
% fit background
fitpow.fit_background();
fitpow.fix_bg_parameters(3); % fix fitted constant bg

% set bounds on first (and only in this case) model parameter
fitpow.set_model_parameter_bounds(1, 0, []) % Force J_1 to be AFM

[pfit, cost_val, stat] = fitpow.fit();

% plot 2D colorfill
fitpow.plot_result(pfit, 10,  'EdgeAlpha', 0.9, 'LineWidth', 1 ,'EdgeColor', 'k')

% make 1D plots
qcens = [0.8:0.4:1.6];
dq = 0.05;
fitpow.plot_1d_cuts_of_2d_data(qcens-dq, qcens+dq, pfit)


%% Fit 1D cuts
% As discussed the sw_fitpowder class can be initialised with a cell array
% of xye structs correpsonding to 1D cuts at constant |Q|.
% Alternatively, having loaded in 2D data the sw_fitpowder class has a 
% convenient method to take 1D cuts and replace the data. 
% 
% To evaluate the cost function for 1D cuts, the class averages the model 
% over nQ points. Depending on the size of the 2D data and the value of nQ
% it can be much quicker to fit 1D cuts.
% 
% The background for 1D cuts can be handled in two ways:
%
%  - A planar background as in the 2D case
%
%  - A linear background in energy transfer that's independent for each cut.
%
% The background parameters and bounds are reset if the background
% strategy is changed to independent.

% set nQ before replacing data (reduced from default, 10, for speed)
fitpow.nQ = 5;
% change background strategyto independent (planar is default)
fitpow.replace_2D_data_with_1D_cuts(qcens-dq, qcens+dq, "independent");

% independent linear background for all cuts with parameters:
% [slope_energy,  intercept]
fitpow.fix_bg_parameters(1); % fix slopes to initial value (0) for all cuts
% e.g. fitpow.fix_bg_parameters(1, 2) would fix the bg slope of the second cut 
fitpow.set_bg_parameter_bounds(2, 0.0, []) % Set lb of constant bg = 0
% fit background
fitpow.estimate_constant_background();
fitpow.fit_background();
fitpow.fix_bg_parameters(2); % fix fitted constant bg

[pfit, cost_val, stat]  = fitpow.fit();

fitpow.plot_result(pfit)




##### SOURCE END #####</literal>
-->